module fancy_manager #(ROW=8, COL=8)(
    input clk,  // clock
    input rst,  // reset
    input row_button[ROW],
    input col_button[COL],
    input toggle_button,
    output out[ROW][COL][3]
  ) {
  
  pn_gen pn_gen(.clk(clk), .rst(rst));
  
  button_conditioner state_toggle_cond(.clk(clk));
  button_conditioner toggle_button_cond(.clk(clk));
  
  edge_detector state_toggle_detector(.clk(clk), #RISE(1), #FALL(0));
  edge_detector toggle_button_detector(.clk(clk), #RISE(1), #FALL(0));

  fsm state(.clk(clk), .rst(rst)) = {DUMMY, STATIC, SCROLL, SQUARE, CONWAY_INIT_TOP, CONWAY_INIT_BTM, CONWAY};
  dff clock_counter[24](.clk(clk), .rst(rst));
  dff seven_counter[3](.clk(clk), .rst(rst));
  sig static[ROW][COL][3];
  sig scroll[ROW][COL][3];
  sig square[ROW][COL][3];
  
  const CONWAY_LIVE = 3d3;
  const CONWAY_DEAD = 3d7;
  dff conway[ROW][COL][3](.clk(clk), .rst(rst));
  sig conway_temp[ROW][COL];
  
  var r, c, temp;

  always {
    // ========== PN_GEN ==========
    pn_gen.seed = 0;
    pn_gen.next = 1;
    // ========== BTNCON ==========
    state_toggle_cond.in = col_button[0];
    toggle_button_cond.in = toggle_button;
    
    state_toggle_detector.in = state_toggle_cond.out;
    toggle_button_detector.in = toggle_button_cond.out;
    
    // ========== COUNTS ==========
    clock_counter.d = clock_counter.q + 1;
    if (clock_counter.q[22:0] == 23h7fffff) seven_counter.d = seven_counter.q+1 - ((seven_counter.q+1)/7*7); // cycle of 7
    
    // ========== STATIC ==========
    for (r=0; r<ROW; r++) {
      for (c=0; c<COL; c++ ) {
        temp = r + c;
        static[r][c] = temp - (temp/7*7);
      }
    }
    
    // ========== SCROLL ==========
    for (r=0; r<ROW; r++) {
      for (c=0; c<COL; c++) {
        temp = static[r][c] + seven_counter.q;
        scroll[r][c] = temp - (temp/7*7);
      }
    }
    
    // ========== SQUARE ==========
    square = {
      {3d3,3d3,3d3,3d3,3d3,3d3,3d3,3d3},
      {3d3,3d2,3d2,3d2,3d2,3d2,3d2,3d3},
      {3d3,3d2,3d1,3d1,3d1,3d1,3d2,3d3},
      {3d3,3d2,3d1,3d0,3d0,3d1,3d2,3d3},
      {3d3,3d2,3d1,3d0,3d0,3d1,3d2,3d3},
      {3d3,3d2,3d1,3d1,3d1,3d1,3d2,3d3},
      {3d3,3d2,3d2,3d2,3d2,3d2,3d2,3d3},
      {3d3,3d3,3d3,3d3,3d3,3d3,3d3,3d3}
    };
    for (r=0; r<ROW; r++) {
      for (c=0; c<COL; c++ ) {
        temp = square[r][c] + seven_counter.q;
        square[r][c] = temp - (temp/7*7);
      }
    }
    
    // ========== CONWAY ==========
    if (state.q == state.CONWAY_INIT_TOP) {
      for (r=0; r<ROW/2; r++) conway_temp[r] = pn_gen.num[(r*COL)+:COL]; // grab slices of 8 and put them into conway_temp
      for (r=0; r<ROW/2; r++) for (c=0; c<COL; c++) conway.d[r][c] = conway_temp[r][c] ? CONWAY_LIVE : CONWAY_DEAD; // 0 - black, 1 - green
      for (r=ROW/2; r<ROW; r++) for (c=0; c<COL;c ++) conway.d[r][c] = CONWAY_DEAD;
      state.d = state.CONWAY_INIT_BTM;
    }
    else if (state.q == state.CONWAY_INIT_BTM) {
      for (r=0; r<ROW/2; r++) conway_temp[r] = pn_gen.num[(r*COL)+:COL];
      for (r=0; r<ROW/2; r++) for (c=0; c<COL; c++) conway.d[r][c] = (conway_temp[r][c] & (conway.q[r][c] == CONWAY_LIVE)) ? CONWAY_LIVE : CONWAY_DEAD;
      state.d = state.CONWAY;
    }
    else if (state.q == state.CONWAY) {
      if (clock_counter.q == 24hffffff) {
        for (r=0; r<ROW; r++) {
          for (c=0; c<COL; c++) {
            temp = 0;
            // count neighbours
            if (r > 0) {
              temp = temp + (conway.q[r-1][c] == CONWAY_LIVE); // top
              if (c != 0) temp = temp + (conway.q[r-1][c-1] == CONWAY_LIVE); // top-left
              if (c != COL-1) temp = temp + (conway.q[r-1][c+1] == CONWAY_LIVE); // top-right
            }
            if (r < ROW-1) {
              temp = temp + (conway.q[r+1][c] == CONWAY_LIVE); // btm
              if (c != 0) temp = temp + (conway.q[r+1][c-1] == CONWAY_LIVE); // btm-left
              if (c != COL-1) temp = temp + (conway.q[r+1][c+1] == CONWAY_LIVE); // btm-right
            }
            if (c > 0) temp = temp + (conway.q[r][c-1] == CONWAY_LIVE); // left
            if (c < COL-1) temp = temp + (conway.q[r][c+1] == CONWAY_LIVE); // right
            // determine living factor
            if (conway.q[r][c] == CONWAY_LIVE) { // if alive
              if (temp < 2) conway.d[r][c] = CONWAY_DEAD; // underpopulation
              else if (temp > 3) conway.d[r][c] = CONWAY_DEAD; // overpopulation
              else conway.d[r][c] = CONWAY_LIVE;
            }
            else {
              if (temp == 3) conway.d[r][c] = CONWAY_LIVE; // dead + 3 neighbours
            }
          }
        }
      }
      if (toggle_button_detector.out) state.d = state.CONWAY_INIT_TOP;
    }
    
    // ========= STATES ==========
    if (state_toggle_detector.out) {
      case (state.q) {
        state.STATIC: state.d = state.SCROLL;
        state.SCROLL: state.d = state.SQUARE;
        state.SQUARE: state.d = state.CONWAY_INIT_TOP;          
        default: state.d = state.STATIC;
      }
      clock_counter.d = 0; // reset clock counter when change of state
      seven_counter.d = 0; // reset seven counter too
    }
    
    // ========== OUTPUT ==========
    case (state.q) {
      state.STATIC: out = static;
      state.SCROLL: out = scroll;
      state.SQUARE: out = square;
      state.CONWAY: out = conway.q;
      default: out = static;
    }
  }
}
