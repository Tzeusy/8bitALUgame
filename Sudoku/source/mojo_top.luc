module mojo_top #(ROW=8, COL=8)(
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    input col_button[8],
    input row_button[8],
    input toggle_button,
    input check_button,
    input reset_button,
    output led_strip[ROW]
  ) {
  
  sig rst;                  // reset signal
  fsm state(.clk(clk), .rst(rst), #INIT(SELECT_DIFFICULTY)) = {GET_DIFFICULTY, SELECT_DIFFICULTY, INIT_BOARD, WAIT, ROW_SELECTED, COL_SELECTED, BOTH_SELECTED, NO_TOGGLE, CHECK, WRONG, DONE, GAME};
  dff no_toggle_counter[24](.clk(clk), .rst(rst)); // counter for flashing display when toggle is disabled
  dff wrong_counter[25](.clk(clk), .rst(rst)); // counter for flashing display when wrong answer is given
  var i;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    button_conditioner toggle_cond;
    button_conditioner check_cond;
    button_conditioner row_cond;
    button_conditioner col_cond;
    // edge detectors for button conditioners - {toggle, check, row[0-7], col[0-7]}
    edge_detector toggle_detector(#RISE(1), #FALL(0));
    edge_detector check_detector(#RISE(1), #FALL(0));
    edge_detector row_detector(#RISE(1), #FALL(0));
    edge_detector col_detector(#RISE(1), #FALL(0));
    
    .rst(rst) {
      board_generator gen(#ROW(ROW), #COL(COL));
      board_manager board_mgr(#ROW(ROW), #COL(COL));
      mask_manager mask_mgr(#ROW(ROW), #COL(COL));
      select_manager select_mgr;
      board_checker chkr(#ROW(ROW), #COL(COL));
      display display(#ROW(ROW), #COL(COL));
      
      fancy_display fancy_display(#ROW(ROW), #COL(COL));
      fancy_manager fancy_mgr(#ROW(ROW), #COL(COL));
      fancy_bisbas bisbas(#ROW(ROW), #COL(COL));
    }
  }
  
  always {
    // initializing button conditioners
    row_cond.in = |row_button;
    col_cond.in = |col_button;
    toggle_cond.in = toggle_button;
    check_cond.in = check_button;
    reset_cond.in = reset_button;
    // initializing edge detectors
    row_detector.in = row_cond.out;
    col_detector.in = col_cond.out;
    toggle_detector.in = toggle_cond.out;
    check_detector.in = check_cond.out;
    rst = reset_cond.out;
    // default variables for board_generator
    gen.en = 0;
    gen.increase_difficulty = 0;
    gen.n = 2b0;
    // default variables for board_manager
    board_mgr.write = 0;
    board_mgr.toggle = 0;
    board_mgr.row = 3b0;
    board_mgr.col = 3b0;
    board_mgr.data = board_mgr.out;
    // default variables for mask_manager
    mask_mgr.write_state = 2b0;
    mask_mgr.row = 3b0;
    mask_mgr.col = 3b0;
    // default variables for select_manager
    select_mgr.write_row = 0;
    select_mgr.write_col = 0;
    select_mgr.row_in = 3b0;
    select_mgr.col_in = 3b0;
    // const variables for board_checker
    chkr.board = board_mgr.out;
    chkr.ans = gen.ans;
    // const variables for display
    display.data = board_mgr.out;
    display.mask = mask_mgr.out;
    display.init = gen.init;
    led_strip = display.out;
    // default variables for fancy
    bisbas.start = 0;
    bisbas.p1_button = col_button[7:4];
    bisbas.p2_button = row_button[3:0];
    bisbas.replay = toggle_detector.out;
    fancy_mgr.col_button = col_button;
    fancy_display.data = fancy_mgr.out;
    
    case (state.q) {
      state.GET_DIFFICULTY:
        display.data = gen.select_difficulty;
        display.init = gen.no_toggle; // set to all ones so that it would be the bright version
        if (|col_button) {
          gen.en = 1;
          state.d = state.INIT_BOARD;
        }
        if (col_button[6] || col_button[7]) gen.n = 2d0;
        else if (col_button[4] || col_button[5]) gen.n = 2d1;
        else if (col_button[2] || col_button[3]) gen.n = 2d2;
        else if (col_button[0] || col_button[1]) gen.n = 2d3;
      state.SELECT_DIFFICULTY:
        display.data = gen.difficulty_board;
        display.init = gen.no_toggle;
        if (check_detector.out) gen.increase_difficulty = 1;
        if (toggle_detector.out) state.d = state.INIT_BOARD;
      state.INIT_BOARD:
        // writes initial board to the manager
        board_mgr.write = 1;
        board_mgr.data = gen.init;
        if (!(|col_button)) state.d = state.WAIT; // wait for button release
      state.WAIT:
        mask_mgr.write_state = 2b00;
        
        if (check_detector.out) state.d = state.CHECK;        
        else if (row_detector.out) {
          for (i=0; i<ROW; i++) if (row_button[i]) select_mgr.row_in = i;
          select_mgr.write_row = 1;
          state.d = state.ROW_SELECTED;
        }
        else if (col_detector.out) {
          for (i=0; i<COL; i++) if (col_button[i]) select_mgr.col_in = i;
          select_mgr.write_col = 1;
          state.d = state.COL_SELECTED;
        }
        // SNEAKY
        if (~rst_n) state.d = state.DONE;
        if (toggle_cond.out && check_cond.out) state.d = state.DONE;
      state.ROW_SELECTED:
        mask_mgr.write_state = 2b01;
        mask_mgr.row = select_mgr.row_out;
        
        if (check_detector.out) state.d = state.CHECK;
        else if (row_detector.out) { // if same row, return to state.WAIT, else change row
          for (i=0; i<ROW; i++) 
            if (row_button[i]) {
              if (select_mgr.row_out == i) state.d = state.WAIT;
              else {
                select_mgr.row_in = i;
                select_mgr.write_row = 1;
              }
            }
        }
        else if (col_detector.out) { // set col, go to state.BOTH_SELECTED
          for (i=0; i<COL; i++) if (col_button[i]) select_mgr.col_in = i;
          select_mgr.write_col = 1;
          state.d = state.BOTH_SELECTED;
        }
      state.COL_SELECTED:
        mask_mgr.write_state = 2b10;
        mask_mgr.col = select_mgr.col_out;
        
        if (check_detector.out) state.d = state.CHECK;
        else if (row_detector.out) { // set row, go to state.BOTH_SELECTED
          for (i=0; i<ROW; i++) if (row_button[i]) select_mgr.row_in = i;
          select_mgr.write_row = 1;
          state.d = state.BOTH_SELECTED;
        }
        else if (col_detector.out) { // if same col, return to state.WAIT, else change col
          for (i=0; i<COL; i++)
            if (col_button[i]) {
              if (select_mgr.col_out == i) state.d = state.WAIT;
              else {
                select_mgr.col_in = i;
                select_mgr.write_col = 1;
              }
            }
        }
      state.BOTH_SELECTED:
        mask_mgr.write_state = 2b11;
        mask_mgr.row = select_mgr.row_out;
        mask_mgr.col = select_mgr.col_out;
        
        if (check_detector.out) state.d = state.CHECK;
        else if (toggle_detector.out) {
          if (gen.init[select_mgr.row_out][select_mgr.col_out] != 2b00) state.d = state.NO_TOGGLE;
          else {
            board_mgr.row = select_mgr.row_out;
            board_mgr.col = select_mgr.col_out;
            board_mgr.toggle = 1;
          }
        }
        else if (row_detector.out) {
          for (i=0; i<ROW; i++)
            if (row_button[i]) {
              if (select_mgr.row_out == i) state.d = state.WAIT;
              else {
                select_mgr.row_in = i;
                select_mgr.write_row = 1;
                state.d = state.ROW_SELECTED;
              }
            }
        }
        else if (col_detector.out) {
          for (i=0; i<COL; i++)
            if (col_button[i]) {
              if (select_mgr.col_out == i) state.d = state.WAIT;
              else {
                select_mgr.col_in = i;
                select_mgr.write_col = 1;
                state.d = state.COL_SELECTED;
              }
            }
        }
      state.NO_TOGGLE:
        no_toggle_counter.d = no_toggle_counter.q + 1;
        if (no_toggle_counter.q == 24hffffff) state.d = state.BOTH_SELECTED;
        display.data = gen.no_toggle;
      state.CHECK:
        if (chkr.read_enable) state.d = chkr.out ? state.DONE : state.WRONG;
      state.WRONG:
        wrong_counter.d = wrong_counter.q + 1;
        if (wrong_counter.q == 25h1ffffff) state.d = state.WAIT;
        display.data = wrong_counter.q[23] ? gen.empty : gen.wrong;
        display.init = gen.no_toggle; // again set to all ones for bright version
      state.DONE:
        led_strip = fancy_display.out;
        if (col_detector.out) if (col_button[0]) {
          state.d = state.GAME;
          bisbas.start = 1;
        }
      state.GAME:
        fancy_display.data = bisbas.out;
        led_strip = fancy_display.out;
    }
  }    
}