module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    input io_dip [3][8],    // DIP switches on IO Shield
    input prng_pin[8],
    output led_strip[8]
  ) {
  
  sig rst;                  // reset signal
  fsm state(.clk(clk), .rst(rst), #INIT(GET_PRNG)) = {GET_PRNG, INIT_BOARD, WAIT};
  sig board[8][8][3];
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst) {
      prng prng;
      board_generator gen;
      display display;
    }
  }
  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    io_led[1] = 8b0;
    // getting a random result from floating pins
    io_led[2] = io_dip[2] ^ prng_pin;
    prng.seed = io_dip[2] ^ prng_pin;
    gen.n = prng.value[1:0];
    display.en = 0;
    display.data = gen.board;
    led_strip = display.out;

    case (state.q) {
      state.GET_PRNG:
        io_led[0] = prng.value;
        if (prng.done == 1) state.d = state.INIT_BOARD;
      state.INIT_BOARD:
        display.en = 1;
        state.d = state.WAIT;
    }
    
    led = 8h00;               // turn LEDs off
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port
  }    
}