module mojo_top #(ROW=8, COL=8)(
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    //input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    //input spi_ss,           // AVR SPI Slave Select
    //input spi_mosi,         // AVR SPI MOSI
    //input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    //input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    //input avr_rx_busy,      // AVR RX buffer full
    input io_dip [3][8],    // DIP switches on IO Shield
    input io_button[5],
    output led_strip[ROW]
  ) {
  
  sig rst;                  // reset signal
  fsm state(.clk(clk), .rst(rst)) = {GET_PRNG, INIT_BOARD, WAIT, ROW_SELECTED, COL_SELECTED, BOTH_SELECTED, CHECK, WRONG, DONE};
  dff wrong_counter[25](.clk(clk), .rst(rst)); // counter for flashing display when wrong answer is given
  board_generator gen(#ROW(ROW), #COL(COL));
  var i;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    button_conditioner toggle_conditioner;
    button_conditioner check_conditioner;
    button_conditioner row_conditioner;
    button_conditioner col_conditioner;
    // edge detectors for button conditioners - {toggle, check, row[0-7], col[0-7]}
    edge_detector toggle_detector(#RISE(1), #FALL(0));
    edge_detector check_detector(#RISE(1), #FALL(0));
    edge_detector row_detector(#RISE(1), #FALL(0));
    edge_detector col_detector(#RISE(1), #FALL(0));
    
    .rst(rst) {
      prng prng;
      board_manager board_mgr(#ROW(ROW), #COL(COL));
      mask_manager mask_mgr(#ROW(ROW), #COL(COL));
      select_manager select_mgr;
      board_checker chkr(#ROW(ROW), #COL(COL));
      display display(#ROW(ROW), #COL(COL));
    }
  }
  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    // initializing button conditioners
    toggle_conditioner.in = io_button[1]; // toggle_button_cond.in = toggle_button;
    check_conditioner.in = io_button[4];
    row_conditioner.in = |io_dip[0];
    col_conditioner.in = |io_dip[1];
    // initializing edge detectors
    toggle_detector.in = toggle_conditioner.out;
    check_detector.in = check_conditioner.out;
    row_detector.in = row_conditioner.out;
    col_detector.in = col_conditioner.out;
    // seeding prng
    prng.seed = io_dip[2];
    // const value for board_generator
    gen.n = prng.value[1:0];
    // default variables for board_manager
    board_mgr.write = 0;
    board_mgr.toggle = 0;
    board_mgr.row = 3b0;
    board_mgr.col = 3b0;
    board_mgr.data = board_mgr.out;
    // default variables for mask_manager
    mask_mgr.write_state = 2b0;
    mask_mgr.row = 3b0;
    mask_mgr.col = 3b0;
    // default variables for select_manager
    select_mgr.write_row = 0;
    select_mgr.write_col = 0;
    select_mgr.row_in = 3b0;
    select_mgr.col_in = 3b0;
    // const variables for board_checker
    chkr.board = board_mgr.out;
    chkr.ans = gen.ans;
    // const variables for display
    display.data = board_mgr.out;
    display.mask = mask_mgr.out;
    led_strip = display.out;
    
    case (state.q) {
      state.GET_PRNG:
        // wait for prng to complete its calculations
        if (prng.read_enable) state.d = state.INIT_BOARD;
      state.INIT_BOARD:
        // writes initial board to the manager
        board_mgr.write = 1;
        board_mgr.data = gen.init;
        state.d = state.WAIT;
      state.WAIT:
        mask_mgr.write_state = 2b00;
        
        if (check_detector.out) state.d = state.CHECK;        
        else if (row_detector.out) {
          for (i=0; i<ROW; i++) if (io_dip[0][i]) select_mgr.row_in = i;
          select_mgr.write_row = 1;
          state.d = state.ROW_SELECTED;
        }
        else if (col_detector.out) {
          for (i=0; i<COL; i++) if (io_dip[1][i]) select_mgr.col_in = i;
          select_mgr.write_col = 1;
          state.d = state.COL_SELECTED;
        }
      state.ROW_SELECTED:
        mask_mgr.write_state = 2b01;
        mask_mgr.row = select_mgr.row_out;
        
        if (check_detector.out) state.d = state.CHECK;
        else if (row_detector.out) { // if same row, return to state.WAIT, else change row
          for (i=0; i<ROW; i++) 
            if (io_dip[0][i]) {
              if (select_mgr.row_out == i) state.d = state.WAIT;
              else {
                select_mgr.row_in = i;
                select_mgr.write_row = 1;
              }
            }
        }
        else if (col_detector.out) { // set col, go to state.BOTH_SELECTED
          for (i=0; i<COL; i++) if (io_dip[1][i]) select_mgr.col_in = i;
          select_mgr.write_col = 1;
          state.d = state.BOTH_SELECTED;
        }
      state.COL_SELECTED:
        mask_mgr.write_state = 2b10;
        mask_mgr.col = select_mgr.col_out;
        
        if (check_detector.out) state.d = state.CHECK;
        else if (row_detector.out) { // set row, go to state.BOTH_SELECTED
          for (i=0; i<ROW; i++) if (io_dip[0][i]) select_mgr.row_in = i;
          select_mgr.write_row = 1;
          state.d = state.BOTH_SELECTED;
        }
        else if (col_detector.out) { // if same col, return to state.WAIT, else change col
          for (i=0; i<COL; i++)
            if (io_dip[1][i]) {
              if (select_mgr.col_out == i) state.d = state.WAIT;
              else {
                select_mgr.col_in = i;
                select_mgr.write_col = 1;
              }
            }
        }
      state.BOTH_SELECTED:
        mask_mgr.write_state = 2b11;
        mask_mgr.row = select_mgr.row_out;
        mask_mgr.col = select_mgr.col_out;
        
        if (toggle_detector.out) {
          board_mgr.row = select_mgr.row_out;
          board_mgr.col = select_mgr.col_out;
          board_mgr.toggle = 1;
        }
        else if (row_detector.out) {
          for (i=0; i<ROW; i++)
            if (io_dip[0][i]) {
              if (select_mgr.row_out == i) state.d = state.WAIT;
              else {
                select_mgr.row_in = i;
                select_mgr.write_row = 1;
              }
            }
        }
        else if (col_detector.out) {
          for (i=0; i<COL; i++)
            if (io_dip[1][i]) {
              if (select_mgr.col_out == i) state.d = state.WAIT;
              else {
                select_mgr.col_in = i;
                select_mgr.write_col = 1;
              }
            }
        }
      state.CHECK:
        if (chkr.read_enable) state.d = chkr.out ? state.DONE : state.WRONG;
      state.WRONG:
        wrong_counter.d = wrong_counter.q + 1;
        if (wrong_counter.q == 25h1ffffff) state.d = state.WAIT;
        display.data = wrong_counter.q[23] ? gen.empty : gen.wrong;
      state.DONE:
        display.data = gen.done;
    }
    
    led = 8h00;               // turn LEDs off
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port
  }    
}