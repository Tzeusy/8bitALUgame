/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg a,
    output reg b,
    output reg c,
    input out1,
    input out2
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam ZEROZEROZERO_state = 3'd0;
  localparam ZEROZEROONE_state = 3'd1;
  localparam ZEROONEZERO_state = 3'd2;
  localparam ONEZEROZERO_state = 3'd3;
  localparam ZEROONEONE_state = 3'd4;
  localparam ONEZEROONE_state = 3'd5;
  localparam ONEONEZERO_state = 3'd6;
  localparam ONEONEONE_state = 3'd7;
  
  reg [2:0] M_state_d, M_state_q = ZEROZEROZERO_state;
  wire [1-1:0] M_evaluater_fpgasum;
  wire [1-1:0] M_evaluater_fpgacarry;
  reg [1-1:0] M_evaluater_a;
  reg [1-1:0] M_evaluater_b;
  reg [1-1:0] M_evaluater_c;
  evaluation_2 evaluater (
    .clk(clk),
    .rst(rst),
    .a(M_evaluater_a),
    .b(M_evaluater_b),
    .c(M_evaluater_c),
    .fpgasum(M_evaluater_fpgasum),
    .fpgacarry(M_evaluater_fpgacarry)
  );
  wire [1-1:0] M_alternator_a;
  wire [1-1:0] M_alternator_b;
  wire [1-1:0] M_alternator_c;
  blinker_3 alternator (
    .clk(clk),
    .rst(rst),
    .a(M_alternator_a),
    .b(M_alternator_b),
    .c(M_alternator_c)
  );
  
  always @* begin
    M_state_d = M_state_q;
    
    a = 1'h0;
    b = 1'h0;
    c = 1'h0;
    M_evaluater_a = 1'h0;
    M_evaluater_b = 1'h0;
    M_evaluater_c = 1'h0;
    
    case (M_state_q)
      ZEROZEROZERO_state: begin
        a = 1'h0;
        b = 1'h0;
        c = 1'h0;
        M_evaluater_a = 1'h0;
        M_evaluater_b = 1'h0;
        M_evaluater_c = 1'h0;
        led[0+0-:1] = 1'h0;
        led[1+0-:1] = 1'h0;
        led[2+0-:1] = 1'h0;
        if (M_alternator_a == 1'h1) begin
          M_state_d = ZEROZEROONE_state;
        end
      end
      ZEROZEROONE_state: begin
        a = 1'h1;
        b = 1'h0;
        c = 1'h0;
        M_evaluater_a = 1'h1;
        M_evaluater_b = 1'h0;
        M_evaluater_c = 1'h0;
        led[0+0-:1] = 1'h1;
        led[1+0-:1] = 1'h0;
        led[2+0-:1] = 1'h0;
        if (M_alternator_a == 1'h0) begin
          M_state_d = ZEROONEZERO_state;
        end
      end
      ZEROONEZERO_state: begin
        a = 1'h0;
        b = 1'h1;
        c = 1'h0;
        M_evaluater_a = 1'h0;
        M_evaluater_b = 1'h1;
        M_evaluater_c = 1'h0;
        led[0+0-:1] = 1'h0;
        led[1+0-:1] = 1'h1;
        led[2+0-:1] = 1'h0;
        if (M_alternator_a == 1'h1) begin
          M_state_d = ONEZEROZERO_state;
        end
      end
      ONEZEROZERO_state: begin
        a = 1'h0;
        b = 1'h0;
        c = 1'h1;
        M_evaluater_a = 1'h0;
        M_evaluater_b = 1'h0;
        M_evaluater_c = 1'h1;
        led[0+0-:1] = 1'h0;
        led[1+0-:1] = 1'h0;
        led[2+0-:1] = 1'h1;
        if (M_alternator_a == 1'h0) begin
          M_state_d = ZEROONEONE_state;
        end
      end
      ZEROONEONE_state: begin
        a = 1'h1;
        b = 1'h1;
        c = 1'h0;
        M_evaluater_a = 1'h1;
        M_evaluater_b = 1'h1;
        M_evaluater_c = 1'h0;
        led[0+0-:1] = 1'h1;
        led[1+0-:1] = 1'h1;
        led[2+0-:1] = 1'h0;
        if (M_alternator_a == 1'h1) begin
          M_state_d = ONEZEROONE_state;
        end
      end
      ONEZEROONE_state: begin
        a = 1'h1;
        b = 1'h0;
        c = 1'h1;
        M_evaluater_a = 1'h1;
        M_evaluater_b = 1'h0;
        M_evaluater_c = 1'h1;
        led[0+0-:1] = 1'h1;
        led[1+0-:1] = 1'h0;
        led[2+0-:1] = 1'h1;
        if (M_alternator_a == 1'h0) begin
          M_state_d = ONEONEZERO_state;
        end
      end
      ONEONEZERO_state: begin
        a = 1'h0;
        b = 1'h1;
        c = 1'h1;
        M_evaluater_a = 1'h0;
        M_evaluater_b = 1'h1;
        M_evaluater_c = 1'h1;
        led[0+0-:1] = 1'h0;
        led[1+0-:1] = 1'h1;
        led[2+0-:1] = 1'h1;
        if (M_alternator_a == 1'h1) begin
          M_state_d = ONEONEONE_state;
        end
      end
      ONEONEONE_state: begin
        a = 1'h1;
        b = 1'h1;
        c = 1'h1;
        M_evaluater_a = 1'h1;
        M_evaluater_b = 1'h1;
        M_evaluater_c = 1'h1;
        led[0+0-:1] = 1'h1;
        led[1+0-:1] = 1'h1;
        led[2+0-:1] = 1'h1;
        if (M_alternator_a == 1'h0) begin
          M_state_d = ZEROZEROZERO_state;
        end
      end
    endcase
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led[3+0-:1] = out1;
    led[4+0-:1] = out2;
    led[5+0-:1] = M_evaluater_fpgasum;
    led[6+0-:1] = M_evaluater_fpgacarry;
    led[7+0-:1] = (M_evaluater_fpgasum == out1) & (M_evaluater_fpgacarry == out2);
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
