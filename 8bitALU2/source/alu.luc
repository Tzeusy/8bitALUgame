// Arithmetic Logic Unit
// Uses the convention stated in the README to determine
// which action to perform on the inputs.

module alu (
    input clk,  // clock 
    input a[8],
    input b[8],
    input alufn[6],
    output result[8]
  ) {

  // initialize the required modules
  eightbitfa eightbitfa1; // 8 bit full adder
  comp comp1;  // comparator module
  mul mul1; // multiplication module
  div div1; // division module
  shift shift1; // shifter
  boolean boolean1; // boolean operations
  
  always {
    // set the inputs to the relevant modules
    eightbitfa1.a = a;
    eightbitfa1.b = b;
    eightbitfa1.alufn = alufn[0];
    
    mul1.a = a;
    mul1.b = b;
    
    div1.a = a;
    div1.b = b;
    
    comp1.z = eightbitfa1.z;
    comp1.v = eightbitfa1.v;
    comp1.n = eightbitfa1.n;
    comp1.alufn[0] = alufn[1];
    comp1.alufn[1] = alufn[2];
    
    shift1.a = a;
    shift1.b = b;
    shift1.alufn[0] = alufn[0];
    shift1.alufn[1] = alufn[1];
    
    boolean1.a = a;
    boolean1.b = b;
    boolean1.alufn[0] = alufn[0];
    boolean1.alufn[1] = alufn[1];
    boolean1.alufn[2] = alufn[2];
    boolean1.alufn[3] = alufn[3];
    
    // switch based on the input alufn.
    case(alufn)
    {
      6b000000: result = eightbitfa1.sum;
      6b000001: result = eightbitfa1.sum;
      6b000010: result = mul1.value;
      6b000011: result = div1.value;
      6b011000: result = boolean1.gate;
      6b011110: result = boolean1.gate;
      6b010110: result = boolean1.gate;
      6b011010: result = a;
      6b100000: result = shift1.shifted;
      6b100001: result = shift1.shifted;
      6b100011: result = shift1.shifted;
      6b110011: result = comp1.compared;
      6b110101: result = comp1.compared;
      6b110111: result = comp1.compared;
      default: result = 0;
    }   
  }
}