/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_2 (
    input clk,
    input [7:0] a,
    input [7:0] b,
    input [5:0] alufn,
    output reg [7:0] sum
  );
  
  
  
  wire [8-1:0] M_comp1_compared;
  reg [2-1:0] M_comp1_alufn;
  reg [1-1:0] M_comp1_z;
  reg [1-1:0] M_comp1_v;
  reg [1-1:0] M_comp1_n;
  comp_3 comp1 (
    .alufn(M_comp1_alufn),
    .z(M_comp1_z),
    .v(M_comp1_v),
    .n(M_comp1_n),
    .compared(M_comp1_compared)
  );
  
  wire [8-1:0] M_eightbitfa1_sum;
  wire [1-1:0] M_eightbitfa1_v;
  wire [1-1:0] M_eightbitfa1_z;
  wire [1-1:0] M_eightbitfa1_n;
  reg [8-1:0] M_eightbitfa1_a;
  reg [8-1:0] M_eightbitfa1_b;
  reg [1-1:0] M_eightbitfa1_alufn;
  eightbitfa_4 eightbitfa1 (
    .a(M_eightbitfa1_a),
    .b(M_eightbitfa1_b),
    .alufn(M_eightbitfa1_alufn),
    .sum(M_eightbitfa1_sum),
    .v(M_eightbitfa1_v),
    .z(M_eightbitfa1_z),
    .n(M_eightbitfa1_n)
  );
  
  wire [8-1:0] M_shift1_shifted;
  reg [2-1:0] M_shift1_alufn;
  reg [8-1:0] M_shift1_a;
  reg [8-1:0] M_shift1_b;
  shift_5 shift1 (
    .alufn(M_shift1_alufn),
    .a(M_shift1_a),
    .b(M_shift1_b),
    .shifted(M_shift1_shifted)
  );
  
  wire [8-1:0] M_boolean1_gate;
  reg [4-1:0] M_boolean1_alufn;
  reg [8-1:0] M_boolean1_a;
  reg [8-1:0] M_boolean1_b;
  boolean_6 boolean1 (
    .alufn(M_boolean1_alufn),
    .a(M_boolean1_a),
    .b(M_boolean1_b),
    .gate(M_boolean1_gate)
  );
  
  always @* begin
    M_eightbitfa1_a = a;
    M_eightbitfa1_b = b;
    M_comp1_v = M_eightbitfa1_v;
    M_comp1_n = M_eightbitfa1_n;
    M_comp1_z = M_eightbitfa1_z;
    M_shift1_a = a;
    M_shift1_b = b;
    M_boolean1_a = a;
    M_boolean1_b = b;
    M_eightbitfa1_alufn = alufn[0+0-:1];
    M_comp1_alufn[0+0-:1] = alufn[1+0-:1];
    M_comp1_alufn[1+0-:1] = alufn[2+0-:1];
    M_shift1_alufn[0+0-:1] = alufn[0+0-:1];
    M_shift1_alufn[1+0-:1] = alufn[1+0-:1];
    M_boolean1_alufn[0+0-:1] = alufn[0+0-:1];
    M_boolean1_alufn[1+0-:1] = alufn[1+0-:1];
    M_boolean1_alufn[2+0-:1] = alufn[2+0-:1];
    M_boolean1_alufn[3+0-:1] = alufn[3+0-:1];
    
    case (alufn)
      6'h00: begin
        sum = M_eightbitfa1_sum;
      end
      6'h01: begin
        sum = M_eightbitfa1_sum;
      end
      6'h18: begin
        sum = M_boolean1_gate;
      end
      6'h1e: begin
        sum = M_boolean1_gate;
      end
      6'h16: begin
        sum = M_boolean1_gate;
      end
      6'h1a: begin
        sum = a;
      end
      6'h20: begin
        sum = M_shift1_shifted;
      end
      6'h21: begin
        sum = M_shift1_shifted;
      end
      6'h23: begin
        sum = M_shift1_shifted;
      end
      6'h33: begin
        sum = M_comp1_compared;
      end
      6'h35: begin
        sum = M_comp1_compared;
      end
      6'h37: begin
        sum = M_comp1_compared;
      end
      default: begin
        sum = 1'h0;
      end
    endcase
  end
endmodule
